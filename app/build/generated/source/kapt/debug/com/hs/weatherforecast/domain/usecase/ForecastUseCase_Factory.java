// Generated by Dagger (https://dagger.dev).
package com.hs.weatherforecast.domain.usecase;

import com.hs.weatherforecast.repo.ForecastRepository;
import dagger.internal.Factory;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ForecastUseCase_Factory implements Factory<ForecastUseCase> {
  private final Provider<ForecastRepository> repositoryProvider;

  public ForecastUseCase_Factory(Provider<ForecastRepository> repositoryProvider) {
    this.repositoryProvider = repositoryProvider;
  }

  @Override
  public ForecastUseCase get() {
    return newInstance(repositoryProvider.get());
  }

  public static ForecastUseCase_Factory create(Provider<ForecastRepository> repositoryProvider) {
    return new ForecastUseCase_Factory(repositoryProvider);
  }

  public static ForecastUseCase newInstance(ForecastRepository repository) {
    return new ForecastUseCase(repository);
  }
}

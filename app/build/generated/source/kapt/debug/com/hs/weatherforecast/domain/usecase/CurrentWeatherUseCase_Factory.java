// Generated by Dagger (https://dagger.dev).
package com.hs.weatherforecast.domain.usecase;

import com.hs.weatherforecast.repo.CurrentWeatherRepository;
import dagger.internal.Factory;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class CurrentWeatherUseCase_Factory implements Factory<CurrentWeatherUseCase> {
  private final Provider<CurrentWeatherRepository> repositoryProvider;

  public CurrentWeatherUseCase_Factory(Provider<CurrentWeatherRepository> repositoryProvider) {
    this.repositoryProvider = repositoryProvider;
  }

  @Override
  public CurrentWeatherUseCase get() {
    return newInstance(repositoryProvider.get());
  }

  public static CurrentWeatherUseCase_Factory create(
      Provider<CurrentWeatherRepository> repositoryProvider) {
    return new CurrentWeatherUseCase_Factory(repositoryProvider);
  }

  public static CurrentWeatherUseCase newInstance(CurrentWeatherRepository repository) {
    return new CurrentWeatherUseCase(repository);
  }
}

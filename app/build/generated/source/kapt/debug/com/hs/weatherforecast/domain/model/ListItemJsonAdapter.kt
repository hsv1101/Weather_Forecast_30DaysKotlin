// Code generated by moshi-kotlin-codegen. Do not edit.
package com.hs.weatherforecast.domain.model

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import java.lang.NullPointerException
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List
import kotlin.collections.emptySet
import kotlin.text.buildString

@Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION")
class ListItemJsonAdapter(
  moshi: Moshi
) : JsonAdapter<ListItem>() {
  private val options: JsonReader.Options = JsonReader.Options.of("dt", "rain", "dt_txt", "snow",
      "weather", "main", "clouds", "sys", "wind")

  private val nullableLongAdapter: JsonAdapter<Long?> = moshi.adapter(Long::class.javaObjectType,
      emptySet(), "dt")

  private val nullableRainAdapter: JsonAdapter<Rain?> = moshi.adapter(Rain::class.java, emptySet(),
      "rain")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "dtTxt")

  private val nullableSnowAdapter: JsonAdapter<Snow?> = moshi.adapter(Snow::class.java, emptySet(),
      "snow")

  private val nullableListOfNullableWeatherItemAdapter: JsonAdapter<List<WeatherItem?>?> =
      moshi.adapter(Types.newParameterizedType(List::class.java, WeatherItem::class.java),
      emptySet(), "weather")

  private val nullableMainAdapter: JsonAdapter<Main?> = moshi.adapter(Main::class.java, emptySet(),
      "main")

  private val nullableCloudsAdapter: JsonAdapter<Clouds?> = moshi.adapter(Clouds::class.java,
      emptySet(), "clouds")

  private val nullableSysAdapter: JsonAdapter<Sys?> = moshi.adapter(Sys::class.java, emptySet(),
      "sys")

  private val nullableWindAdapter: JsonAdapter<Wind?> = moshi.adapter(Wind::class.java, emptySet(),
      "wind")

  override fun toString(): String = buildString(30) {
      append("GeneratedJsonAdapter(").append("ListItem").append(')') }

  override fun fromJson(reader: JsonReader): ListItem {
    var dt: Long? = null
    var rain: Rain? = null
    var dtTxt: String? = null
    var snow: Snow? = null
    var weather: List<WeatherItem?>? = null
    var main: Main? = null
    var clouds: Clouds? = null
    var sys: Sys? = null
    var wind: Wind? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> dt = nullableLongAdapter.fromJson(reader)
        1 -> rain = nullableRainAdapter.fromJson(reader)
        2 -> dtTxt = nullableStringAdapter.fromJson(reader)
        3 -> snow = nullableSnowAdapter.fromJson(reader)
        4 -> weather = nullableListOfNullableWeatherItemAdapter.fromJson(reader)
        5 -> main = nullableMainAdapter.fromJson(reader)
        6 -> clouds = nullableCloudsAdapter.fromJson(reader)
        7 -> sys = nullableSysAdapter.fromJson(reader)
        8 -> wind = nullableWindAdapter.fromJson(reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return ListItem(
        dt = dt,
        rain = rain,
        dtTxt = dtTxt,
        snow = snow,
        weather = weather,
        main = main,
        clouds = clouds,
        sys = sys,
        wind = wind
    )
  }

  override fun toJson(writer: JsonWriter, value: ListItem?) {
    if (value == null) {
      throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("dt")
    nullableLongAdapter.toJson(writer, value.dt)
    writer.name("rain")
    nullableRainAdapter.toJson(writer, value.rain)
    writer.name("dt_txt")
    nullableStringAdapter.toJson(writer, value.dtTxt)
    writer.name("snow")
    nullableSnowAdapter.toJson(writer, value.snow)
    writer.name("weather")
    nullableListOfNullableWeatherItemAdapter.toJson(writer, value.weather)
    writer.name("main")
    nullableMainAdapter.toJson(writer, value.main)
    writer.name("clouds")
    nullableCloudsAdapter.toJson(writer, value.clouds)
    writer.name("sys")
    nullableSysAdapter.toJson(writer, value.sys)
    writer.name("wind")
    nullableWindAdapter.toJson(writer, value.wind)
    writer.endObject()
  }
}

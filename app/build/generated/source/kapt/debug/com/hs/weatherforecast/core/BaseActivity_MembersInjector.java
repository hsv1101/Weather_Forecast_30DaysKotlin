// Generated by Dagger (https://dagger.dev).
package com.hs.weatherforecast.core;

import androidx.databinding.ViewDataBinding;
import androidx.lifecycle.ViewModelProvider;
import dagger.MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.support.DaggerAppCompatActivity_MembersInjector;
import dagger.internal.InjectedFieldSignature;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class BaseActivity_MembersInjector<VM extends BaseViewModel, DB extends ViewDataBinding> implements MembersInjector<BaseActivity<VM, DB>> {
  private final Provider<DispatchingAndroidInjector<Object>> androidInjectorProvider;

  private final Provider<ViewModelProvider.Factory> viewModelProviderFactoryProvider;

  public BaseActivity_MembersInjector(
      Provider<DispatchingAndroidInjector<Object>> androidInjectorProvider,
      Provider<ViewModelProvider.Factory> viewModelProviderFactoryProvider) {
    this.androidInjectorProvider = androidInjectorProvider;
    this.viewModelProviderFactoryProvider = viewModelProviderFactoryProvider;
  }

  public static <VM extends BaseViewModel, DB extends ViewDataBinding> MembersInjector<BaseActivity<VM, DB>> create(
      Provider<DispatchingAndroidInjector<Object>> androidInjectorProvider,
      Provider<ViewModelProvider.Factory> viewModelProviderFactoryProvider) {
    return new BaseActivity_MembersInjector<VM, DB>(androidInjectorProvider, viewModelProviderFactoryProvider);}

  @Override
  public void injectMembers(BaseActivity<VM, DB> instance) {
    DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, androidInjectorProvider.get());
    injectViewModelProviderFactory(instance, viewModelProviderFactoryProvider.get());
  }

  @InjectedFieldSignature("com.hs.weatherforecast.core.BaseActivity.viewModelProviderFactory")
  public static <VM extends BaseViewModel, DB extends ViewDataBinding> void injectViewModelProviderFactory(
      BaseActivity<VM, DB> instance, ViewModelProvider.Factory viewModelProviderFactory) {
    instance.viewModelProviderFactory = viewModelProviderFactory;
  }
}

// Generated by Dagger (https://dagger.dev).
package com.hs.weatherforecast.ui.dashboard;

import android.content.SharedPreferences;
import com.hs.weatherforecast.domain.usecase.CurrentWeatherUseCase;
import com.hs.weatherforecast.domain.usecase.ForecastUseCase;
import dagger.internal.Factory;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DashboardFragmentViewModel_Factory implements Factory<DashboardFragmentViewModel> {
  private final Provider<ForecastUseCase> forecastUseCaseProvider;

  private final Provider<CurrentWeatherUseCase> currentWeatherUseCaseProvider;

  private final Provider<SharedPreferences> sharedPreferencesProvider;

  public DashboardFragmentViewModel_Factory(Provider<ForecastUseCase> forecastUseCaseProvider,
      Provider<CurrentWeatherUseCase> currentWeatherUseCaseProvider,
      Provider<SharedPreferences> sharedPreferencesProvider) {
    this.forecastUseCaseProvider = forecastUseCaseProvider;
    this.currentWeatherUseCaseProvider = currentWeatherUseCaseProvider;
    this.sharedPreferencesProvider = sharedPreferencesProvider;
  }

  @Override
  public DashboardFragmentViewModel get() {
    return newInstance(forecastUseCaseProvider.get(), currentWeatherUseCaseProvider.get(), sharedPreferencesProvider.get());
  }

  public static DashboardFragmentViewModel_Factory create(
      Provider<ForecastUseCase> forecastUseCaseProvider,
      Provider<CurrentWeatherUseCase> currentWeatherUseCaseProvider,
      Provider<SharedPreferences> sharedPreferencesProvider) {
    return new DashboardFragmentViewModel_Factory(forecastUseCaseProvider, currentWeatherUseCaseProvider, sharedPreferencesProvider);
  }

  public static DashboardFragmentViewModel newInstance(ForecastUseCase forecastUseCase,
      CurrentWeatherUseCase currentWeatherUseCase, SharedPreferences sharedPreferences) {
    return new DashboardFragmentViewModel(forecastUseCase, currentWeatherUseCase, sharedPreferences);
  }
}

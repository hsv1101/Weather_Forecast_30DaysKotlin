// Code generated by moshi-kotlin-codegen. Do not edit.
package com.hs.weatherforecast.domain.model

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import com.squareup.moshi.internal.Util
import java.lang.NullPointerException
import java.lang.reflect.Constructor
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List
import kotlin.collections.emptySet
import kotlin.jvm.Volatile
import kotlin.text.buildString

@Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION")
class CurrentWeatherResponseJsonAdapter(
  moshi: Moshi
) : JsonAdapter<CurrentWeatherResponse>() {
  private val options: JsonReader.Options = JsonReader.Options.of("visibility", "timezone", "main",
      "clouds", "sys", "dt", "coord", "weather", "name", "cod", "id", "base", "wind")

  private val nullableIntAdapter: JsonAdapter<Int?> = moshi.adapter(Int::class.javaObjectType,
      emptySet(), "visibility")

  private val nullableMainAdapter: JsonAdapter<Main?> = moshi.adapter(Main::class.java, emptySet(),
      "main")

  private val nullableCloudsAdapter: JsonAdapter<Clouds?> = moshi.adapter(Clouds::class.java,
      emptySet(), "clouds")

  private val nullableSysAdapter: JsonAdapter<Sys?> = moshi.adapter(Sys::class.java, emptySet(),
      "sys")

  private val nullableCoordAdapter: JsonAdapter<Coord?> = moshi.adapter(Coord::class.java,
      emptySet(), "coord")

  private val nullableListOfNullableWeatherItemAdapter: JsonAdapter<List<WeatherItem?>?> =
      moshi.adapter(Types.newParameterizedType(List::class.java, WeatherItem::class.java),
      emptySet(), "weather")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "name")

  private val nullableWindAdapter: JsonAdapter<Wind?> = moshi.adapter(Wind::class.java, emptySet(),
      "wind")

  @Volatile
  private var constructorRef: Constructor<CurrentWeatherResponse>? = null

  override fun toString(): String = buildString(44) {
      append("GeneratedJsonAdapter(").append("CurrentWeatherResponse").append(')') }

  override fun fromJson(reader: JsonReader): CurrentWeatherResponse {
    var visibility: Int? = null
    var timezone: Int? = null
    var main: Main? = null
    var clouds: Clouds? = null
    var sys: Sys? = null
    var dt: Int? = null
    var coord: Coord? = null
    var weather: List<WeatherItem?>? = null
    var name: String? = null
    var cod: Int? = null
    var id: Int? = null
    var base: String? = null
    var wind: Wind? = null
    var mask0 = -1
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> {
          visibility = nullableIntAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 0).inv()
          mask0 = mask0 and 0xfffffffe.toInt()
        }
        1 -> {
          timezone = nullableIntAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 1).inv()
          mask0 = mask0 and 0xfffffffd.toInt()
        }
        2 -> {
          main = nullableMainAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 2).inv()
          mask0 = mask0 and 0xfffffffb.toInt()
        }
        3 -> {
          clouds = nullableCloudsAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 3).inv()
          mask0 = mask0 and 0xfffffff7.toInt()
        }
        4 -> {
          sys = nullableSysAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 4).inv()
          mask0 = mask0 and 0xffffffef.toInt()
        }
        5 -> {
          dt = nullableIntAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 5).inv()
          mask0 = mask0 and 0xffffffdf.toInt()
        }
        6 -> {
          coord = nullableCoordAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 6).inv()
          mask0 = mask0 and 0xffffffbf.toInt()
        }
        7 -> {
          weather = nullableListOfNullableWeatherItemAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 7).inv()
          mask0 = mask0 and 0xffffff7f.toInt()
        }
        8 -> {
          name = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 8).inv()
          mask0 = mask0 and 0xfffffeff.toInt()
        }
        9 -> {
          cod = nullableIntAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 9).inv()
          mask0 = mask0 and 0xfffffdff.toInt()
        }
        10 -> {
          id = nullableIntAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 10).inv()
          mask0 = mask0 and 0xfffffbff.toInt()
        }
        11 -> {
          base = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 11).inv()
          mask0 = mask0 and 0xfffff7ff.toInt()
        }
        12 -> {
          wind = nullableWindAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 12).inv()
          mask0 = mask0 and 0xffffefff.toInt()
        }
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    @Suppress("UNCHECKED_CAST")
    val localConstructor: Constructor<CurrentWeatherResponse> = this.constructorRef ?:
        CurrentWeatherResponse::class.java.getDeclaredConstructor(Int::class.javaObjectType,
        Int::class.javaObjectType, Main::class.java, Clouds::class.java, Sys::class.java,
        Int::class.javaObjectType, Coord::class.java, List::class.java, String::class.java,
        Int::class.javaObjectType, Int::class.javaObjectType, String::class.java, Wind::class.java,
        Int::class.javaPrimitiveType, Util.DEFAULT_CONSTRUCTOR_MARKER).also { this.constructorRef =
        it }
    return localConstructor.newInstance(
        visibility,
        timezone,
        main,
        clouds,
        sys,
        dt,
        coord,
        weather,
        name,
        cod,
        id,
        base,
        wind,
        mask0,
        null
    )
  }

  override fun toJson(writer: JsonWriter, value: CurrentWeatherResponse?) {
    if (value == null) {
      throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("visibility")
    nullableIntAdapter.toJson(writer, value.visibility)
    writer.name("timezone")
    nullableIntAdapter.toJson(writer, value.timezone)
    writer.name("main")
    nullableMainAdapter.toJson(writer, value.main)
    writer.name("clouds")
    nullableCloudsAdapter.toJson(writer, value.clouds)
    writer.name("sys")
    nullableSysAdapter.toJson(writer, value.sys)
    writer.name("dt")
    nullableIntAdapter.toJson(writer, value.dt)
    writer.name("coord")
    nullableCoordAdapter.toJson(writer, value.coord)
    writer.name("weather")
    nullableListOfNullableWeatherItemAdapter.toJson(writer, value.weather)
    writer.name("name")
    nullableStringAdapter.toJson(writer, value.name)
    writer.name("cod")
    nullableIntAdapter.toJson(writer, value.cod)
    writer.name("id")
    nullableIntAdapter.toJson(writer, value.id)
    writer.name("base")
    nullableStringAdapter.toJson(writer, value.base)
    writer.name("wind")
    nullableWindAdapter.toJson(writer, value.wind)
    writer.endObject()
  }
}

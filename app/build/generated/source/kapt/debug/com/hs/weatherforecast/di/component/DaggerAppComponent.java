// Generated by Dagger (https://dagger.dev).
package com.hs.weatherforecast.di.component;

import android.app.Application;
import android.content.Context;
import android.content.SharedPreferences;
import androidx.lifecycle.ViewModel;
import com.algolia.search.saas.places.PlacesClient;
import com.hs.weatherforecast.WeatherForecast;
import com.hs.weatherforecast.WeatherForecast_MembersInjector;
import com.hs.weatherforecast.core.BaseActivity_MembersInjector;
import com.hs.weatherforecast.db.WeatherDatabase;
import com.hs.weatherforecast.db.dao.CitiesForSearchDao;
import com.hs.weatherforecast.db.dao.CurrentWeatherDao;
import com.hs.weatherforecast.db.dao.ForecastDao;
import com.hs.weatherforecast.di.ViewModelFactory;
import com.hs.weatherforecast.di.ViewModelFactory_Factory;
import com.hs.weatherforecast.di.module.ActivityModule_MainActivity$app_debug;
import com.hs.weatherforecast.di.module.ApplicationModule;
import com.hs.weatherforecast.di.module.ApplicationModule_ProvideContextFactory;
import com.hs.weatherforecast.di.module.ApplicationModule_ProvideSharedPreferencesFactory;
import com.hs.weatherforecast.di.module.DatabaseModule;
import com.hs.weatherforecast.di.module.DatabaseModule_GetDatabaseFactory;
import com.hs.weatherforecast.di.module.DatabaseModule_ProvideCitiesForSearchDaoFactory;
import com.hs.weatherforecast.di.module.DatabaseModule_ProvideCurrentWeatherDaoFactory;
import com.hs.weatherforecast.di.module.DatabaseModule_ProvideForecastDaoFactory;
import com.hs.weatherforecast.di.module.FragmentBuildersModule_ContributeDashboardFragment;
import com.hs.weatherforecast.di.module.FragmentBuildersModule_ContributeSearchFragment;
import com.hs.weatherforecast.di.module.FragmentBuildersModule_ContributeSplashFragment;
import com.hs.weatherforecast.di.module.FragmentBuildersModule_ContributeWeatherDetailFragment;
import com.hs.weatherforecast.di.module.NetModule;
import com.hs.weatherforecast.di.module.NetModule_ProvideMoshiFactory;
import com.hs.weatherforecast.di.module.NetModule_ProvideOkHttpClientFactory;
import com.hs.weatherforecast.di.module.NetModule_ProvidePlacesClientFactory;
import com.hs.weatherforecast.di.module.NetModule_ProvideRetrofitFactory;
import com.hs.weatherforecast.di.module.NetModule_ProvideServiceFactory;
import com.hs.weatherforecast.domain.WeatherAppAPI;
import com.hs.weatherforecast.domain.datasource.currentWeather.CurrentWeatherLocalDataSource;
import com.hs.weatherforecast.domain.datasource.currentWeather.CurrentWeatherLocalDataSource_Factory;
import com.hs.weatherforecast.domain.datasource.currentWeather.CurrentWeatherRemoteDataSource;
import com.hs.weatherforecast.domain.datasource.currentWeather.CurrentWeatherRemoteDataSource_Factory;
import com.hs.weatherforecast.domain.datasource.forecast.ForecastLocalDataSource;
import com.hs.weatherforecast.domain.datasource.forecast.ForecastLocalDataSource_Factory;
import com.hs.weatherforecast.domain.datasource.forecast.ForecastRemoteDataSource;
import com.hs.weatherforecast.domain.datasource.forecast.ForecastRemoteDataSource_Factory;
import com.hs.weatherforecast.domain.datasource.searchCities.SearchCitiesLocalDataSource;
import com.hs.weatherforecast.domain.datasource.searchCities.SearchCitiesLocalDataSource_Factory;
import com.hs.weatherforecast.domain.datasource.searchCities.SearchCitiesRemoteDataSource;
import com.hs.weatherforecast.domain.datasource.searchCities.SearchCitiesRemoteDataSource_Factory;
import com.hs.weatherforecast.domain.usecase.CurrentWeatherUseCase;
import com.hs.weatherforecast.domain.usecase.CurrentWeatherUseCase_Factory;
import com.hs.weatherforecast.domain.usecase.ForecastUseCase;
import com.hs.weatherforecast.domain.usecase.ForecastUseCase_Factory;
import com.hs.weatherforecast.domain.usecase.SearchCitiesUseCase;
import com.hs.weatherforecast.domain.usecase.SearchCitiesUseCase_Factory;
import com.hs.weatherforecast.repo.CurrentWeatherRepository;
import com.hs.weatherforecast.repo.CurrentWeatherRepository_Factory;
import com.hs.weatherforecast.repo.ForecastRepository;
import com.hs.weatherforecast.repo.ForecastRepository_Factory;
import com.hs.weatherforecast.repo.SearchCitiesRepository;
import com.hs.weatherforecast.repo.SearchCitiesRepository_Factory;
import com.hs.weatherforecast.ui.dashboard.DashboardFragment;
import com.hs.weatherforecast.ui.dashboard.DashboardFragmentViewModel;
import com.hs.weatherforecast.ui.dashboard.DashboardFragmentViewModel_Factory;
import com.hs.weatherforecast.ui.dashboard.forecast.ForecastItemViewModel;
import com.hs.weatherforecast.ui.dashboard.forecast.ForecastItemViewModel_Factory;
import com.hs.weatherforecast.ui.main.MainActivity;
import com.hs.weatherforecast.ui.main.MainActivityViewModel;
import com.hs.weatherforecast.ui.main.MainActivityViewModel_Factory;
import com.hs.weatherforecast.ui.main.MainActivity_MembersInjector;
import com.hs.weatherforecast.ui.search.SearchFragment;
import com.hs.weatherforecast.ui.search.SearchViewModel;
import com.hs.weatherforecast.ui.search.SearchViewModel_Factory;
import com.hs.weatherforecast.ui.search.result.SearchResultItemViewModel;
import com.hs.weatherforecast.ui.search.result.SearchResultItemViewModel_Factory;
import com.hs.weatherforecast.ui.splash.SplashFragment;
import com.hs.weatherforecast.ui.splash.SplashFragmentViewModel;
import com.hs.weatherforecast.ui.splash.SplashFragmentViewModel_Factory;
import com.hs.weatherforecast.ui.weather_detail.WeatherDetailFragment;
import com.hs.weatherforecast.ui.weather_detail.WeatherDetailViewModel;
import com.hs.weatherforecast.ui.weather_detail.WeatherDetailViewModel_Factory;
import com.hs.weatherforecast.ui.weather_detail.weatherHourOfDay.WeatherHourOfDayItemViewModel;
import com.hs.weatherforecast.ui.weather_detail.weatherHourOfDay.WeatherHourOfDayItemViewModel_Factory;
import com.squareup.moshi.Moshi;
import dagger.android.AndroidInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.android.support.DaggerAppCompatActivity_MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapBuilder;
import dagger.internal.MapProviderFactory;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private Provider<ActivityModule_MainActivity$app_debug.MainActivitySubcomponent.Factory> mainActivitySubcomponentFactoryProvider;

  private Provider<Application> applicationProvider;

  private Provider<SharedPreferences> provideSharedPreferencesProvider;

  private Provider<SplashFragmentViewModel> splashFragmentViewModelProvider;

  private Provider<Moshi> provideMoshiProvider;

  private Provider<OkHttpClient> provideOkHttpClientProvider;

  private Provider<Retrofit.Builder> provideRetrofitProvider;

  private Provider<WeatherAppAPI> provideServiceProvider;

  private Provider<ForecastRemoteDataSource> forecastRemoteDataSourceProvider;

  private Provider<Context> provideContextProvider;

  private Provider<WeatherDatabase> getDatabaseProvider;

  private Provider<ForecastDao> provideForecastDaoProvider;

  private Provider<ForecastLocalDataSource> forecastLocalDataSourceProvider;

  private Provider<ForecastRepository> forecastRepositoryProvider;

  private Provider<ForecastUseCase> forecastUseCaseProvider;

  private Provider<CurrentWeatherRemoteDataSource> currentWeatherRemoteDataSourceProvider;

  private Provider<CurrentWeatherDao> provideCurrentWeatherDaoProvider;

  private Provider<CurrentWeatherLocalDataSource> currentWeatherLocalDataSourceProvider;

  private Provider<CurrentWeatherRepository> currentWeatherRepositoryProvider;

  private Provider<CurrentWeatherUseCase> currentWeatherUseCaseProvider;

  private Provider<DashboardFragmentViewModel> dashboardFragmentViewModelProvider;

  private Provider<WeatherDetailViewModel> weatherDetailViewModelProvider;

  private Provider<CitiesForSearchDao> provideCitiesForSearchDaoProvider;

  private Provider<SearchCitiesLocalDataSource> searchCitiesLocalDataSourceProvider;

  private Provider<PlacesClient> providePlacesClientProvider;

  private Provider<SearchCitiesRemoteDataSource> searchCitiesRemoteDataSourceProvider;

  private Provider<SearchCitiesRepository> searchCitiesRepositoryProvider;

  private Provider<SearchCitiesUseCase> searchCitiesUseCaseProvider;

  private Provider<SearchViewModel> searchViewModelProvider;

  private Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>> mapOfClassOfAndProviderOfViewModelProvider;

  private Provider<ViewModelFactory> viewModelFactoryProvider;

  private DaggerAppComponent(ApplicationModule applicationModuleParam, NetModule netModuleParam,
      DatabaseModule databaseModuleParam, Application applicationParam) {

    initialize(applicationModuleParam, netModuleParam, databaseModuleParam, applicationParam);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
      ) {
    return Collections.<Class<?>, Provider<AndroidInjector.Factory<?>>>singletonMap(MainActivity.class, (Provider) mainActivitySubcomponentFactoryProvider);}

  private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
    return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());}

  @SuppressWarnings("unchecked")
  private void initialize(final ApplicationModule applicationModuleParam,
      final NetModule netModuleParam, final DatabaseModule databaseModuleParam,
      final Application applicationParam) {
    this.mainActivitySubcomponentFactoryProvider = new Provider<ActivityModule_MainActivity$app_debug.MainActivitySubcomponent.Factory>() {
      @Override
      public ActivityModule_MainActivity$app_debug.MainActivitySubcomponent.Factory get() {
        return new MainActivitySubcomponentFactory();}
    };
    this.applicationProvider = InstanceFactory.create(applicationParam);
    this.provideSharedPreferencesProvider = DoubleCheck.provider(ApplicationModule_ProvideSharedPreferencesFactory.create(applicationModuleParam, applicationProvider));
    this.splashFragmentViewModelProvider = SplashFragmentViewModel_Factory.create(provideSharedPreferencesProvider);
    this.provideMoshiProvider = DoubleCheck.provider(NetModule_ProvideMoshiFactory.create(netModuleParam));
    this.provideOkHttpClientProvider = DoubleCheck.provider(NetModule_ProvideOkHttpClientFactory.create(netModuleParam));
    this.provideRetrofitProvider = DoubleCheck.provider(NetModule_ProvideRetrofitFactory.create(netModuleParam, provideMoshiProvider, provideOkHttpClientProvider));
    this.provideServiceProvider = DoubleCheck.provider(NetModule_ProvideServiceFactory.create(netModuleParam, provideRetrofitProvider));
    this.forecastRemoteDataSourceProvider = ForecastRemoteDataSource_Factory.create(provideServiceProvider);
    this.provideContextProvider = DoubleCheck.provider(ApplicationModule_ProvideContextFactory.create(applicationModuleParam, applicationProvider));
    this.getDatabaseProvider = DoubleCheck.provider(DatabaseModule_GetDatabaseFactory.create(databaseModuleParam, provideContextProvider));
    this.provideForecastDaoProvider = DoubleCheck.provider(DatabaseModule_ProvideForecastDaoFactory.create(databaseModuleParam, getDatabaseProvider));
    this.forecastLocalDataSourceProvider = ForecastLocalDataSource_Factory.create(provideForecastDaoProvider);
    this.forecastRepositoryProvider = ForecastRepository_Factory.create(forecastRemoteDataSourceProvider, forecastLocalDataSourceProvider);
    this.forecastUseCaseProvider = ForecastUseCase_Factory.create(forecastRepositoryProvider);
    this.currentWeatherRemoteDataSourceProvider = CurrentWeatherRemoteDataSource_Factory.create(provideServiceProvider);
    this.provideCurrentWeatherDaoProvider = DoubleCheck.provider(DatabaseModule_ProvideCurrentWeatherDaoFactory.create(databaseModuleParam, getDatabaseProvider));
    this.currentWeatherLocalDataSourceProvider = CurrentWeatherLocalDataSource_Factory.create(provideCurrentWeatherDaoProvider);
    this.currentWeatherRepositoryProvider = CurrentWeatherRepository_Factory.create(currentWeatherRemoteDataSourceProvider, currentWeatherLocalDataSourceProvider);
    this.currentWeatherUseCaseProvider = CurrentWeatherUseCase_Factory.create(currentWeatherRepositoryProvider);
    this.dashboardFragmentViewModelProvider = DashboardFragmentViewModel_Factory.create(forecastUseCaseProvider, currentWeatherUseCaseProvider, provideSharedPreferencesProvider);
    this.weatherDetailViewModelProvider = WeatherDetailViewModel_Factory.create(forecastLocalDataSourceProvider);
    this.provideCitiesForSearchDaoProvider = DoubleCheck.provider(DatabaseModule_ProvideCitiesForSearchDaoFactory.create(databaseModuleParam, getDatabaseProvider));
    this.searchCitiesLocalDataSourceProvider = SearchCitiesLocalDataSource_Factory.create(provideCitiesForSearchDaoProvider);
    this.providePlacesClientProvider = DoubleCheck.provider(NetModule_ProvidePlacesClientFactory.create(netModuleParam));
    this.searchCitiesRemoteDataSourceProvider = SearchCitiesRemoteDataSource_Factory.create(providePlacesClientProvider, provideMoshiProvider);
    this.searchCitiesRepositoryProvider = SearchCitiesRepository_Factory.create(searchCitiesLocalDataSourceProvider, searchCitiesRemoteDataSourceProvider);
    this.searchCitiesUseCaseProvider = SearchCitiesUseCase_Factory.create(searchCitiesRepositoryProvider);
    this.searchViewModelProvider = SearchViewModel_Factory.create(searchCitiesUseCaseProvider, provideSharedPreferencesProvider);
    this.mapOfClassOfAndProviderOfViewModelProvider = MapProviderFactory.<Class<? extends ViewModel>, ViewModel>builder(8).put(SplashFragmentViewModel.class, (Provider) splashFragmentViewModelProvider).put(MainActivityViewModel.class, (Provider) MainActivityViewModel_Factory.create()).put(DashboardFragmentViewModel.class, (Provider) dashboardFragmentViewModelProvider).put(ForecastItemViewModel.class, (Provider) ForecastItemViewModel_Factory.create()).put(WeatherDetailViewModel.class, (Provider) weatherDetailViewModelProvider).put(WeatherHourOfDayItemViewModel.class, (Provider) WeatherHourOfDayItemViewModel_Factory.create()).put(SearchViewModel.class, (Provider) searchViewModelProvider).put(SearchResultItemViewModel.class, (Provider) SearchResultItemViewModel_Factory.create()).build();
    this.viewModelFactoryProvider = DoubleCheck.provider(ViewModelFactory_Factory.create(mapOfClassOfAndProviderOfViewModelProvider));
  }

  @Override
  public void inject(WeatherForecast weatherApp) {
    injectWeatherForecast(weatherApp);}

  private WeatherForecast injectWeatherForecast(WeatherForecast instance) {
    WeatherForecast_MembersInjector.injectAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private Application application;

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }

    @Override
    public AppComponent build() {
      Preconditions.checkBuilderRequirement(application, Application.class);
      return new DaggerAppComponent(new ApplicationModule(), new NetModule(), new DatabaseModule(), application);
    }
  }

  private final class MainActivitySubcomponentFactory implements ActivityModule_MainActivity$app_debug.MainActivitySubcomponent.Factory {
    @Override
    public ActivityModule_MainActivity$app_debug.MainActivitySubcomponent create(
        MainActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new MainActivitySubcomponentImpl(arg0);
    }
  }

  private final class MainActivitySubcomponentImpl implements ActivityModule_MainActivity$app_debug.MainActivitySubcomponent {
    private Provider<FragmentBuildersModule_ContributeSplashFragment.SplashFragmentSubcomponent.Factory> splashFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuildersModule_ContributeDashboardFragment.DashboardFragmentSubcomponent.Factory> dashboardFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuildersModule_ContributeWeatherDetailFragment.WeatherDetailFragmentSubcomponent.Factory> weatherDetailFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuildersModule_ContributeSearchFragment.SearchFragmentSubcomponent.Factory> searchFragmentSubcomponentFactoryProvider;

    private MainActivitySubcomponentImpl(MainActivity arg0) {

      initialize(arg0);
    }

    private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
        ) {
      return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(5).put(MainActivity.class, (Provider) DaggerAppComponent.this.mainActivitySubcomponentFactoryProvider).put(SplashFragment.class, (Provider) splashFragmentSubcomponentFactoryProvider).put(DashboardFragment.class, (Provider) dashboardFragmentSubcomponentFactoryProvider).put(WeatherDetailFragment.class, (Provider) weatherDetailFragmentSubcomponentFactoryProvider).put(SearchFragment.class, (Provider) searchFragmentSubcomponentFactoryProvider).build();}

    private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
      return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());}

    @SuppressWarnings("unchecked")
    private void initialize(final MainActivity arg0) {
      this.splashFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeSplashFragment.SplashFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuildersModule_ContributeSplashFragment.SplashFragmentSubcomponent.Factory get(
            ) {
          return new SplashFragmentSubcomponentFactory();}
      };
      this.dashboardFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeDashboardFragment.DashboardFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuildersModule_ContributeDashboardFragment.DashboardFragmentSubcomponent.Factory get(
            ) {
          return new DashboardFragmentSubcomponentFactory();}
      };
      this.weatherDetailFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeWeatherDetailFragment.WeatherDetailFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuildersModule_ContributeWeatherDetailFragment.WeatherDetailFragmentSubcomponent.Factory get(
            ) {
          return new WeatherDetailFragmentSubcomponentFactory();}
      };
      this.searchFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeSearchFragment.SearchFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuildersModule_ContributeSearchFragment.SearchFragmentSubcomponent.Factory get(
            ) {
          return new SearchFragmentSubcomponentFactory();}
      };
    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);}

    private MainActivity injectMainActivity(MainActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
      BaseActivity_MembersInjector.injectViewModelProviderFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      MainActivity_MembersInjector.injectDispatchingAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
      return instance;
    }

    private final class SplashFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeSplashFragment.SplashFragmentSubcomponent.Factory {
      @Override
      public FragmentBuildersModule_ContributeSplashFragment.SplashFragmentSubcomponent create(
          SplashFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new SplashFragmentSubcomponentImpl(arg0);
      }
    }

    private final class SplashFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeSplashFragment.SplashFragmentSubcomponent {
      private SplashFragmentSubcomponentImpl(SplashFragment arg0) {

      }

      @Override
      public void inject(SplashFragment arg0) {
      }
    }

    private final class DashboardFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeDashboardFragment.DashboardFragmentSubcomponent.Factory {
      @Override
      public FragmentBuildersModule_ContributeDashboardFragment.DashboardFragmentSubcomponent create(
          DashboardFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new DashboardFragmentSubcomponentImpl(arg0);
      }
    }

    private final class DashboardFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeDashboardFragment.DashboardFragmentSubcomponent {
      private DashboardFragmentSubcomponentImpl(DashboardFragment arg0) {

      }

      @Override
      public void inject(DashboardFragment arg0) {
      }
    }

    private final class WeatherDetailFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeWeatherDetailFragment.WeatherDetailFragmentSubcomponent.Factory {
      @Override
      public FragmentBuildersModule_ContributeWeatherDetailFragment.WeatherDetailFragmentSubcomponent create(
          WeatherDetailFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new WeatherDetailFragmentSubcomponentImpl(arg0);
      }
    }

    private final class WeatherDetailFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeWeatherDetailFragment.WeatherDetailFragmentSubcomponent {
      private WeatherDetailFragmentSubcomponentImpl(WeatherDetailFragment arg0) {

      }

      @Override
      public void inject(WeatherDetailFragment arg0) {
      }
    }

    private final class SearchFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeSearchFragment.SearchFragmentSubcomponent.Factory {
      @Override
      public FragmentBuildersModule_ContributeSearchFragment.SearchFragmentSubcomponent create(
          SearchFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new SearchFragmentSubcomponentImpl(arg0);
      }
    }

    private final class SearchFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeSearchFragment.SearchFragmentSubcomponent {
      private SearchFragmentSubcomponentImpl(SearchFragment arg0) {

      }

      @Override
      public void inject(SearchFragment arg0) {
      }
    }
  }
}

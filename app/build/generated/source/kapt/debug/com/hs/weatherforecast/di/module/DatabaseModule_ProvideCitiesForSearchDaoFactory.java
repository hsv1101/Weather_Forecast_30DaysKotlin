// Generated by Dagger (https://dagger.dev).
package com.hs.weatherforecast.di.module;

import com.hs.weatherforecast.db.WeatherDatabase;
import com.hs.weatherforecast.db.dao.CitiesForSearchDao;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DatabaseModule_ProvideCitiesForSearchDaoFactory implements Factory<CitiesForSearchDao> {
  private final DatabaseModule module;

  private final Provider<WeatherDatabase> dbProvider;

  public DatabaseModule_ProvideCitiesForSearchDaoFactory(DatabaseModule module,
      Provider<WeatherDatabase> dbProvider) {
    this.module = module;
    this.dbProvider = dbProvider;
  }

  @Override
  public CitiesForSearchDao get() {
    return provideCitiesForSearchDao(module, dbProvider.get());
  }

  public static DatabaseModule_ProvideCitiesForSearchDaoFactory create(DatabaseModule module,
      Provider<WeatherDatabase> dbProvider) {
    return new DatabaseModule_ProvideCitiesForSearchDaoFactory(module, dbProvider);
  }

  public static CitiesForSearchDao provideCitiesForSearchDao(DatabaseModule instance,
      WeatherDatabase db) {
    return Preconditions.checkNotNull(instance.provideCitiesForSearchDao(db), "Cannot return null from a non-@Nullable @Provides method");
  }
}

// Generated by Dagger (https://dagger.dev).
package com.hs.weatherforecast.repo;

import com.hs.weatherforecast.domain.datasource.searchCities.SearchCitiesLocalDataSource;
import com.hs.weatherforecast.domain.datasource.searchCities.SearchCitiesRemoteDataSource;
import dagger.internal.Factory;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class SearchCitiesRepository_Factory implements Factory<SearchCitiesRepository> {
  private final Provider<SearchCitiesLocalDataSource> searchCitiesLocalDataSourceProvider;

  private final Provider<SearchCitiesRemoteDataSource> searchCitiesRemoteDataSourceProvider;

  public SearchCitiesRepository_Factory(
      Provider<SearchCitiesLocalDataSource> searchCitiesLocalDataSourceProvider,
      Provider<SearchCitiesRemoteDataSource> searchCitiesRemoteDataSourceProvider) {
    this.searchCitiesLocalDataSourceProvider = searchCitiesLocalDataSourceProvider;
    this.searchCitiesRemoteDataSourceProvider = searchCitiesRemoteDataSourceProvider;
  }

  @Override
  public SearchCitiesRepository get() {
    return newInstance(searchCitiesLocalDataSourceProvider.get(), searchCitiesRemoteDataSourceProvider.get());
  }

  public static SearchCitiesRepository_Factory create(
      Provider<SearchCitiesLocalDataSource> searchCitiesLocalDataSourceProvider,
      Provider<SearchCitiesRemoteDataSource> searchCitiesRemoteDataSourceProvider) {
    return new SearchCitiesRepository_Factory(searchCitiesLocalDataSourceProvider, searchCitiesRemoteDataSourceProvider);
  }

  public static SearchCitiesRepository newInstance(
      SearchCitiesLocalDataSource searchCitiesLocalDataSource,
      SearchCitiesRemoteDataSource searchCitiesRemoteDataSource) {
    return new SearchCitiesRepository(searchCitiesLocalDataSource, searchCitiesRemoteDataSource);
  }
}

// Generated by Dagger (https://dagger.dev).
package com.hs.weatherforecast.di.module;

import com.squareup.moshi.Moshi;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetModule_ProvideRetrofitFactory implements Factory<Retrofit.Builder> {
  private final NetModule module;

  private final Provider<Moshi> moshiProvider;

  private final Provider<OkHttpClient> clientProvider;

  public NetModule_ProvideRetrofitFactory(NetModule module, Provider<Moshi> moshiProvider,
      Provider<OkHttpClient> clientProvider) {
    this.module = module;
    this.moshiProvider = moshiProvider;
    this.clientProvider = clientProvider;
  }

  @Override
  public Retrofit.Builder get() {
    return provideRetrofit(module, moshiProvider.get(), clientProvider.get());
  }

  public static NetModule_ProvideRetrofitFactory create(NetModule module,
      Provider<Moshi> moshiProvider, Provider<OkHttpClient> clientProvider) {
    return new NetModule_ProvideRetrofitFactory(module, moshiProvider, clientProvider);
  }

  public static Retrofit.Builder provideRetrofit(NetModule instance, Moshi moshi,
      OkHttpClient client) {
    return Preconditions.checkNotNull(instance.provideRetrofit(moshi, client), "Cannot return null from a non-@Nullable @Provides method");
  }
}

// Generated by data binding compiler. Do not edit!
package com.hs.weatherforecast.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.databinding.Bindable;
import androidx.databinding.DataBindingUtil;
import androidx.databinding.ViewDataBinding;
import com.google.android.material.card.MaterialCardView;
import com.hs.weatherforecast.R;
import com.hs.weatherforecast.ui.dashboard.forecast.ForecastItemViewModel;
import java.lang.Deprecated;
import java.lang.Object;

public abstract class ItemForecastBinding extends ViewDataBinding {
  @NonNull
  public final MaterialCardView cardView;

  @NonNull
  public final ImageView imageViewForecastIcon;

  @NonNull
  public final LinearLayout linearLayoutTempMaxMin;

  @NonNull
  public final RelativeLayout rootView;

  @NonNull
  public final TextView textViewDayOfWeek;

  @NonNull
  public final TextView textViewTemp;

  @NonNull
  public final TextView textViewTimeOfDay;

  @Bindable
  protected ForecastItemViewModel mViewModel;

  protected ItemForecastBinding(Object _bindingComponent, View _root, int _localFieldCount,
      MaterialCardView cardView, ImageView imageViewForecastIcon,
      LinearLayout linearLayoutTempMaxMin, RelativeLayout rootView, TextView textViewDayOfWeek,
      TextView textViewTemp, TextView textViewTimeOfDay) {
    super(_bindingComponent, _root, _localFieldCount);
    this.cardView = cardView;
    this.imageViewForecastIcon = imageViewForecastIcon;
    this.linearLayoutTempMaxMin = linearLayoutTempMaxMin;
    this.rootView = rootView;
    this.textViewDayOfWeek = textViewDayOfWeek;
    this.textViewTemp = textViewTemp;
    this.textViewTimeOfDay = textViewTimeOfDay;
  }

  public abstract void setViewModel(@Nullable ForecastItemViewModel viewModel);

  @Nullable
  public ForecastItemViewModel getViewModel() {
    return mViewModel;
  }

  @NonNull
  public static ItemForecastBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot) {
    return inflate(inflater, root, attachToRoot, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.item_forecast, root, attachToRoot, component)
   */
  @NonNull
  @Deprecated
  public static ItemForecastBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot, @Nullable Object component) {
    return ViewDataBinding.<ItemForecastBinding>inflateInternal(inflater, R.layout.item_forecast, root, attachToRoot, component);
  }

  @NonNull
  public static ItemForecastBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.item_forecast, null, false, component)
   */
  @NonNull
  @Deprecated
  public static ItemForecastBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable Object component) {
    return ViewDataBinding.<ItemForecastBinding>inflateInternal(inflater, R.layout.item_forecast, null, false, component);
  }

  public static ItemForecastBinding bind(@NonNull View view) {
    return bind(view, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.bind(view, component)
   */
  @Deprecated
  public static ItemForecastBinding bind(@NonNull View view, @Nullable Object component) {
    return (ItemForecastBinding)bind(component, view, R.layout.item_forecast);
  }
}
